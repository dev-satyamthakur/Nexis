name: Deploy Backend to VM

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
  # Add manual trigger
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v3
      
      - name: Debug Secrets Length
        run: |
          echo "VM_HOST length: ${#VM_HOST}"
          echo "VM_USERNAME length: ${#VM_USERNAME}"
          echo "First few characters of VM_HOST: ${VM_HOST:0:4}..."
          echo "First few characters of VM_USERNAME: ${VM_USERNAME:0:2}..."
        env:
          VM_HOST: ${{ secrets.VM_HOST }}
          VM_USERNAME: ${{ secrets.VM_USERNAME }}
          
      - name: Check SSH Key Format
        run: |
          if [[ "${{ secrets.SSH_PRIVATE_KEY }}" == *"BEGIN"* ]]; then
            echo "SSH key appears to have the correct header"
          else
            echo "SSH key is missing the expected header"
          fi
          echo "SSH key length: ${#SSH_PRIVATE_KEY}"
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install Dependencies
        run: npm install
        
      - name: Build
        run: npm run build
        
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # Write SSH config with debug output
          echo "Writing SSH config..."
          
          cat > ~/.ssh/config << EOF
          Host vm
              HostName ${{ secrets.VM_HOST }}
              User ${{ secrets.VM_USERNAME }}
              IdentityFile ~/.ssh/deploy_key
              StrictHostKeyChecking no
          EOF
          
          echo "SSH config created. Contents (excluding sensitive data):"
          cat ~/.ssh/config | grep -v "HostName\|User"
          
          echo "File permissions:"
          ls -la ~/.ssh/
          
      - name: Deploy to VM
        run: |
          echo "Attempting SSH connection..."
          # Try SSH with verbose output
          ssh -v vm 'echo "SSH connection successful"'
          
          echo "Creating temporary directory..."
          ssh vm 'mkdir -p /tmp/backend-deploy'
          
          echo "Copying files..."
          scp -r backend/* vm:/tmp/backend-deploy/
          
          echo "Deploying..."
          ssh vm '
            cd ~/api/backend && \
            cp ecosystem.config.js /tmp/backend-deploy/ 2>/dev/null || true && \
            cp .env /tmp/backend-deploy/ 2>/dev/null || true && \
            rm -rf $(ls -A | grep -v "node_modules") && \
            cp -r /tmp/backend-deploy/* . && \
            yarn install && \
            yarn run build && \
            pm2 restart ecosystem.config.js && \
            rm -rf /tmp/backend-deploy'
